# the upstream component nginx needs to connect to
upstream django {
    server unix:///home/ryanshaw/aeshin/aeshin.sock;
}

server {
    listen      80;
    server_name aeshin.org;

    return 301  https://$host$request_uri;
}

server {
    listen      80;
    server_name www.aeshin.org;

    return 301  https://aeshin.org$request_uri;
}

server {
    listen              443 ssl;
    server_name         aeshin.org;
    ssl_certificate     /home/ryanshaw/aeshin/aeshin.org.crt;
    ssl_certificate_key /home/ryanshaw/aeshin/aeshin.org.key;
    # only use modern, secure cipher suites
    # https://weakdh.org/sysadmin.html
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;
    ssl_dhparam /etc/ssl/dhparams.pem;

    charset             utf-8;

    # max upload size
    client_max_body_size 75M;   # adjust to taste

    if ($host !~* ^aeshin.org$ ) {
        return 444;
    }

    location /media/  {
        internal;
        alias /home/ryanshaw/aeshin/media/;
    }

    location /static/ {
        alias /home/ryanshaw/aeshin/static/;
    }

    location / {
        uwsgi_pass  django;
        include     /home/ryanshaw/aeshin/uwsgi_params;
    }
}
